
#include"graph.h"

int main()
{
    int case_of_graph=0;

    scanf("%d", &case_of_graph);
    getchar();
    for(int num_case=0;num_case<case_of_graph;num_case++)
    {
        if(num_case==0) getchar(); // eat the enter

        char input_start_char;
        scanf(" %c", &input_start_char);
        getchar();
        GraphPoint GP(input_start_char);

        // scan lines and determine whether characters have appear or not
        // if character whether one or both haven't appear then the character place of array +1 and num_stack -1
        // because initial number of stack is same as the number of character
        // or do nothing
        const int side_of_char_conect=3;
        char input_char_connectivity[side_of_char_conect]={};
        while(gets(input_char_connectivity))
        {
            if(input_char_connectivity[0]=='\0') break;

            if(GP.num_all_letter_.plus_letter(input_char_connectivity))
            {
                GP.minus_num_stack(input_char_connectivity);
            }
        }

        GP.print_num_stack();
        if(num_case!=case_of_graph-1)
        {
            puts("");
        }
        GP.num_all_letter_.reset_letter();
    }

    return 0;
}

#include "graph.h"

bool AllLetter::DFS_letter(const int first, const int second)
{
    for(int i=0; i<letter_number; i++)
    {
        if(letter[first][i]==true)
        {
            if(letter[second][i]==true) return true;
        }
    }

    return false;
}
void AllLetter::setTRUE_letter(const int first, const int second)
{
    for(int i=0; i<letter_number; i++)
    {
        if(letter[first][i]==true)
        {
            letter[second][i]=true;
            letter[i][second]=true;
        }
        if(letter[second][i]==true)
        {
            letter[first][i]=true;
            letter[i][first]=true;
        }
    }
}
bool AllLetter::plus_letter(char *input_char_connectivity) // true then execute minus_num_stack(--)
{
    int first=input_char_connectivity[0]-'A', second=input_char_connectivity[1]-'A';

    if((letter[first][second]==true && letter[second][first]==true) || first==second) return false;
    else if(DFS_letter(first,second))
    {
        letter[first][second]=true;
        letter[second][first]=true;
        setTRUE_letter(first,second);
        return false;
    }
    else
    {
        letter[first][second]=true;
        letter[second][first]=true;
        setTRUE_letter(first,second);
        return true;
    }
}
void AllLetter::reset_letter()
{
    for(int i=0; i<letter_number; i++)
    {
        for(int j=0; j<letter_number; j++)
        {
            letter[i][j]=false;
        }
    }
}

#ifndef GRAPH
#define GRAPH

#include<stdio.h>

static constexpr int letter_number=26;

class AllLetter
{
public:
    bool plus_letter(char *input_char_connectivity); // true then execute minus_num_stack
    void reset_letter();
    bool DFS_letter(const int first, const int second);
    void setTRUE_letter(const int first, const int second);
private:
    bool letter[letter_number][letter_number];// record times of letter appear
};
class GraphPoint
{
public:
    GraphPoint(char input_point):input_point_(input_point)
    {
        num_stack_=(input_point_-'A')+1;
        for(int i=0;i<letter_number;i++)
        {
            for(int j=0;j<letter_number;j++)
            {
                num_all_letter_.reset_letter();
            }
        }
    } // setting-function
    void minus_num_stack(char *input_char_connectivity){ num_stack_-=1;}// if plus_letter is ture means the letter hasn't appear so plus and minus num_stack
    void print_num_stack()const { printf("%d\n", num_stack_);}
    AllLetter num_all_letter_;
private:
    const char input_point_;
    int num_stack_; // means number of stack and point at the same time
};

#endif // GRAPH
